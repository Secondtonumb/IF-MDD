# Hyperparameters toggles
prefix: ""

## SSL features Selection
pretrained_models_path: pretrained_models/
# pretrained_models:
# {
#     "wav2vec2_base": "facebook/wav2vec2-base", # 768
#     "hubert_base": "facebook/hubert-base-ls960", # 768
#     "wavlm_base": "microsoft/wavlm-base", # 768
#     "wavlm_base_plus": "microsoft/wavlm-base-plus", # 768
#     "hubert_multilingual": "utter-project/mHuBERT-147", # 768
#     "clap" : "laion/clap-htsat-fused", # 768
#     "data2vec_base": "facebook/data2vec-audio-base", # 768
    
#     "wav2vec2_large": "facebook/wav2vec2-large", # 1024
#     "hubert_large": "facebook/hubert-large-ls960", # 1024
#     "wavlm_large": "microsoft/wavlm-large-plus", # 1024
#     "data2vec_large": "facebook/data2vec-audio-large", #1024
#     "whisper_medium": "openai/whisper-medium", # 1024
    
#     "whisper_large_v3_turbo": "openai/whisper-large-v3-turbo", # 1280
# }

# select pretrained SSL models
perceived_ssl_model: "wavlm_base" # in pretrained_models
canonical_ssl_model: Null

# # models hidden size, varies by model
ENCODER_DIM: 768

# # How to fuse the features
feature_fusion: "mono"        # Options: "mono" for single ssl, "dual_ssl_enc" for dual ssl encoder, "dual_loss" for single SSL dual ssl loss
blend_alpha: 0.5              # If using "blend" fusion

# Input files
# Data files
data_folder_save: "./data"
train_annotation: !ref <data_folder_save>/train-train_times.json
valid_annotation: !ref <data_folder_save>/train-dev_times.json
test_annotation: !ref <data_folder_save>/test_times.json

# generate training id for output folder
# generate_training_id: !apply:trainer.generate_training_id.generate_training_id [!ref <perceived_ssl_model_id>, !ref <canonical_ssl_model_id>, !ref <feature_fusion>, !ref <prefix>]

# output files
output_folder: !ref exp_l2/<perceived_ssl_model>_<canonical_ssl_model>_<feature_fusion>_<prefix>
per_file: !ref <output_folder>/per.txt
per_fuse_file: !ref <output_folder>/per_fuse.txt
mpd_file: !ref <output_folder>/mpd.txt
mpd_fuse_file: !ref <output_folder>/mpd_fuse.txt
save_folder: !ref <output_folder>/save
train_log: !ref <output_folder>/train_log.txt

on_training_test_per_folder: !ref <output_folder>/on_training_test_per
on_training_test_mpd_folder: !ref <output_folder>/on_training_test_mpd

# Modules (SpeechBrain lobes)
modules:
    perceived_ssl: !ref <perceived_ssl>
    canonical_ssl: !ref <canonical_ssl>
    ctc_lin: !ref <ctc_lin>
    d_out: !ref <d_out>
    TransASR: !ref <TransASR>
    enc: !ref <enc>

perceived_ssl: !apply:trainer.AutoSSLoader.AutoSSLLoader
    model_name: !ref <perceived_ssl_model>
    freeze: !ref <freeze_perceived_ssl>
    freeze_feature_extractor: !ref <freeze_perceived_feature_extractor>
    save_path: !ref <pretrained_models_path>
    output_all_hiddens: True

preceived_ssl_emb_layer: -1 # 0~12 for wav2vec2, 0~23 for wavlm, -1 for last layer

canonical_ssl: !apply:trainer.AutoSSLoader.AutoSSLLoader
    model_name: !ref <canonical_ssl_model>
    freeze: !ref <freeze_canonical_ssl>     
    freeze_feature_extractor: !ref <freeze_perceived_feature_extractor>
    save_path: !ref <pretrained_models_path>
    output_all_hiddens: True

# Transformer
d_model: 2048
nhead: 8
num_encoder_layers: 6
num_decoder_layers: 6
d_ffn: 2048
transformer_dropout: 0.1
activation: !name:torch.nn.GELU
encoder_module: conformer # transformer, branchformer

TransASR: !new:speechbrain.lobes.models.transformer.TransformerASR.TransformerASR
    input_size: !ref <ENCODER_DIM>
    tgt_vocab: !ref <output_neurons>
    d_model: !ref <dnn_neurons>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    conformer_activation: !ref <activation>
    branchformer_activation: !ref <activation>
    encoder_module: !ref <encoder_module>
    attention_type: RelPosMHAXL
    normalize_before: True
    causal: False
    output_hidden_states: True

ctc_lin: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <dnn_neurons>
    n_neurons: !ref <output_neurons>

d_out: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <dnn_neurons>
    n_neurons: !ref <output_neurons>

enc: !new:speechbrain.lobes.models.VanillaNN.VanillaNN
    input_shape: [null, null, !ref <ENCODER_DIM>]
    activation: !ref <activation>
    dnn_blocks: !ref <dnn_layers>
    dnn_neurons: !ref <dnn_neurons>

## Models to be trained and saved by Adam optimizer
model: !new:torch.nn.ModuleList
    - [!ref <TransASR>, !ref <ctc_lin>, !ref <d_out>, !ref <enc>]


ctc_scorer: !new:speechbrain.decoders.scorer.CTCScorer
    eos_index: !ref <eos_index>
    blank_index: !ref <blank_index>
    ctc_fc: !ref <ctc_lin>

scorer: !new:speechbrain.decoders.scorer.ScorerBuilder
    full_scorers: [!ref <ctc_scorer>]
    weights:
        ctc: !ref <ctc_weight_decode>
    scorer_beam_scale: !ref <scorer_beam_scale>

# Decoding parameters
min_decode_ratio: 0.1
max_decode_ratio: 0.7
valid_search_interval: 5
valid_beam_size: 1 # We do greedy here so it's faster to decode ...
test_beam_size: 5
ctc_weight_decode: 0.3
scorer_beam_scale: 0.3
ctc_weight: 0.3

valid_search: !new:speechbrain.decoders.S2STransformerBeamSearcher
    modules: [!ref <TransASR>, !ref <d_out>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <valid_beam_size>
    using_eos_threshold: False
    length_normalization: True
    scorer: !ref <scorer>

test_search: !new:speechbrain.decoders.S2STransformerBeamSearcher
    modules: [!ref <TransASR>, !ref <d_out>]
    bos_index: !ref <bos_index>
    eos_index: !ref <eos_index>
    min_decode_ratio: !ref <min_decode_ratio>
    max_decode_ratio: !ref <max_decode_ratio>
    beam_size: !ref <test_beam_size>
    temperature: 1.15
    using_eos_threshold: True
    scorer: !ref <scorer>

# Model parameters
#activation: !name:torch.nn.LeakyReLU
dnn_layers: 2
dnn_neurons: 384  
hidden_lstm_size: 192  # LSTM hidden size for canonical phoneme processing
freeze_perceived_ssl: False
freeze_canonical_ssl: False
freeze_perceived_feature_extractor: False  # freeze the CNN extractor in wav2vec
freeze_canonical_feature_extractor: False         # Freeze Whisper encoder?

log_softmax: !new:speechbrain.nnet.activations.Softmax
    apply_log: True

ctc_cost: !name:speechbrain.nnet.losses.ctc_loss
    blank_index: !ref <blank_index>

seq_cost: !name:speechbrain.nnet.losses.kldiv_loss
    reduction: batchmean
    label_smoothing: 0.1
    

# Outputs
output_neurons: 44 # l2arctic: 39phns(sil) + err + blank + bos + eos == 44
blank_index: 0
bos_index: 42
eos_index: 43

adam_opt_class: !name:torch.optim.Adam
    lr: !ref <lr>

pretrained_opt_class: !name:torch.optim.Adam
    lr: !ref <lr_pretrained>

noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr>
    n_warmup_steps: !ref <warmup_steps>

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        perceived_ssl: !ref <perceived_ssl>
        counter: !ref <epoch_counter>

# augmentation: !new:speechbrain.augment.time_domain.SpeedPerturb
#     orig_freq: !ref <sample_rate>
#     speeds: [95, 100, 105]

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
    limit: !ref <number_of_epochs>

train_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
    save_file: !ref <train_log>

ctc_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric: !name:speechbrain.nnet.losses.ctc_loss
        blank_index: !ref <blank_index>
        reduction: batch

seqlabel_stats: !name:speechbrain.utils.metric_stats.MetricStats
    metric:  !name:speechbrain.nnet.losses.kldiv_loss
        reduction: batch
        label_smoothing: 0.1

per_stats: !name:speechbrain.utils.metric_stats.ErrorRateStats

# # TIMIT
# timit_local_data_folder: "/common/db/TIMIT"  # Path to TIMIT datase

seed: 3047
__set_seed: !apply:torch.manual_seed [!ref <seed>]

# training parameters
number_of_epochs: 500
batch_size: 32
lr: 0.0008
sorting: ascending
sample_rate: 16000
gradient_accumulation: 4
lr_pretrained: 0.00001
warmup_steps: 8000 # 0 for no warmup, or set to 8000 for warmup

# Mix-Precision Training
auto_mix_prec: true
# or
precision: fp16         # 支持 "fp32"、"fp16" 或 "bf16"
eval_precision: fp16    # 推理同样切换到 FP16

# Dataloader options
# Dataloader options
train_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: 0

valid_dataloader_opts:
    batch_size: !ref <batch_size>
    num_workers: 0

test_dataloader_opts:
    batch_size: 1
    num_workers: 0
